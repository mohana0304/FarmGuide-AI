import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Download, FileText, Share } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface DataExportProps {
  language: string;
  currentProfile?: any;
}

const DataExport: React.FC<DataExportProps> = ({ language, currentProfile }) => {
  const { toast } = useToast();

  const generateReportData = () => {
    const timestamp = new Date().toISOString();
    const profileName = currentProfile?.name || 'General';
    
    // Gather all stored data
    const recommendations = JSON.parse(localStorage.getItem('cropwise-recommendation') || '""');
    const chatHistory = JSON.parse(localStorage.getItem('cropwise-chat') || '[]');
    const diagnoses = JSON.parse(localStorage.getItem('cropwise-diagnoses') || '[]');
    const fertilizerAdvice = JSON.parse(localStorage.getItem('cropwise-fertilizer-advice') || '[]');
    const calendar = JSON.parse(localStorage.getItem('cropwise-calendar') || '[]');
    const profiles = JSON.parse(localStorage.getItem('cropwise-profiles') || '[]');

    return {
      reportInfo: {
        generatedAt: timestamp,
        language,
        profileName,
        farmProfile: currentProfile
      },
      recommendations,
      chatHistory,
      diagnoses,
      fertilizerAdvice,
      calendar: calendar.filter((entry: any) => 
        !currentProfile || entry.profileId === currentProfile.id
      ),
      profiles
    };
  };

  const exportAsText = () => {
    const data = generateReportData();
    
    let textContent = `CropWise Farming Report
Generated: ${new Date(data.reportInfo.generatedAt).toLocaleString()}
Language: ${language}
Farm Profile: ${data.reportInfo.profileName}

===============================
FARM PROFILE DETAILS
===============================
`;

    if (data.reportInfo.farmProfile) {
      const profile = data.reportInfo.farmProfile;
      textContent += `
Name: ${profile.name}
Soil Type: ${profile.soilType}
Weather Conditions: ${profile.weather}
Location: ${profile.location || 'Not specified'}
Notes: ${profile.notes || 'None'}
Created: ${new Date(profile.createdAt).toLocaleDateString()}
`;
    }

    if (data.recommendations) {
      textContent += `

===============================
LATEST CROP RECOMMENDATION
===============================
${data.recommendations}
`;
    }

    if (data.diagnoses.length > 0) {
      textContent += `

===============================
CROP DISEASE DIAGNOSES
===============================
`;
      data.diagnoses.forEach((diagnosis: any, index: number) => {
        textContent += `
${index + 1}. ${diagnosis.disease}
   Risk Level: ${diagnosis.riskLevel.toUpperCase()}
   Confidence: ${diagnosis.confidence}%
   Date: ${new Date(diagnosis.timestamp).toLocaleDateString()}
   
   Symptoms:
   ${diagnosis.symptoms.map((s: string) => `   - ${s}`).join('\n')}
   
   Treatment:
   ${diagnosis.treatment}
   
   Preventive Measures:
   ${diagnosis.preventiveMeasures.map((m: string) => `   - ${m}`).join('\n')}
`;
      });
    }

    if (data.fertilizerAdvice.length > 0) {
      textContent += `

===============================
FERTILIZER & IRRIGATION ADVICE
===============================
`;
      data.fertilizerAdvice.forEach((advice: any, index: number) => {
        textContent += `
${index + 1}. ${advice.soilType} Soil, ${advice.weather} Weather
   Date: ${new Date(advice.timestamp).toLocaleDateString()}
   
   Fertilizers:
   ${advice.fertilizers.map((f: any) => 
     `   - ${f.type} (NPK: ${f.npkRatio}): ${f.amount} - ${f.application}`
   ).join('\n')}
   
   Irrigation:
   - Frequency: ${advice.irrigation.frequency}
   - Amount: ${advice.irrigation.amount}
   - Method: ${advice.irrigation.method}
   - Best Times: ${advice.irrigation.schedule.join(', ')}
`;
      });
    }

    if (data.calendar.length > 0) {
      textContent += `

===============================
PLANTING CALENDAR
===============================
`;
      data.calendar.forEach((entry: any, index: number) => {
        textContent += `
${index + 1}. ${entry.crop}
   Planting Date: ${new Date(entry.plantingDate).toLocaleDateString()}
   Expected Harvest: ${new Date(entry.expectedHarvest).toLocaleDateString()}
   Notes: ${entry.notes}
`;
      });
    }

    if (data.chatHistory.length > 0) {
      textContent += `

===============================
CHAT HISTORY
===============================
`;
      data.chatHistory.forEach((message: any) => {
        const sender = message.isUser ? 'You' : 'AI Advisor';
        const time = new Date(message.timestamp).toLocaleString();
        textContent += `
[${time}] ${sender}: ${message.text}
`;
      });
    }

    textContent += `

===============================
Report generated by CropWise - AI Crop Recommender
===============================`;

    // Download the text file
    const blob = new Blob([textContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `cropwise-report-${data.reportInfo.profileName}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded",
      description: "Your farming data has been exported as a text file."
    });
  };

  const exportAsJSON = () => {
    const data = generateReportData();
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `cropwise-data-${data.reportInfo.profileName}-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Data Exported",
      description: "Your complete farming data has been exported as JSON."
    });
  };

  const shareData = async () => {
    const data = generateReportData();
    
    const shareText = `CropWise Farming Report for ${data.reportInfo.profileName}
Generated: ${new Date().toLocaleDateString()}

Latest Recommendation: ${data.recommendations?.substring(0, 100)}...

Generated by CropWise - AI Crop Recommender`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: 'CropWise Farming Report',
          text: shareText,
        });
      } catch (error) {
        // Fallback to copying to clipboard
        navigator.clipboard.writeText(shareText);
        toast({
          title: "Copied to Clipboard",
          description: "Report summary has been copied to your clipboard."
        });
      }
    } else {
      // Fallback to copying to clipboard
      navigator.clipboard.writeText(shareText);
      toast({
        title: "Copied to Clipboard",
        description: "Report summary has been copied to your clipboard."
      });
    }
  };

  return (
    <Card className="shadow-soft">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Download className="h-5 w-5 text-primary" />
          Export & Share Data
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <p className="text-muted-foreground text-sm">
          Export your farming recommendations, diagnoses, chat history, and calendar data.
        </p>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          <Button onClick={exportAsText} variant="outline" className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            Export as Text
          </Button>
          
          <Button onClick={exportAsJSON} variant="outline" className="flex items-center gap-2">
            <Download className="h-4 w-4" />
            Export as JSON
          </Button>
          
          <Button onClick={shareData} variant="outline" className="flex items-center gap-2">
            <Share className="h-4 w-4" />
            Share Summary
          </Button>
        </div>
        
        <div className="p-3 bg-muted/50 rounded-lg text-sm">
          <p className="font-medium mb-1">Export includes:</p>
          <ul className="text-muted-foreground space-y-1">
            <li>• Farm profile details</li>
            <li>• Crop recommendations</li>
            <li>• Disease diagnoses</li>
            <li>• Fertilizer advice</li>
            <li>• Planting calendar</li>
            <li>• Chat history</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
};

export default DataExport;